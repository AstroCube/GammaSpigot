From 67af5789774dc8db141a826a742017def4476a1b Mon Sep 17 00:00:00 2001
From: BuildTools <gilbertodamian14@gmail.com>
Date: Thu, 16 Aug 2018 01:44:54 -0500
Subject: [PATCH] Implement isCancelled method, return true if the task is
 cancelled


diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
index f3da84a9..1f89337c 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
@@ -3,12 +3,11 @@ package org.bukkit.craftbukkit.scheduler;
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.Map;
+import java.util.logging.Level;
 
-import org.apache.commons.lang.UnhandledException;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitWorker;
 
-
 class CraftAsyncTask extends CraftTask {
 
     private final LinkedList<BukkitWorker> workers = new LinkedList<BukkitWorker>();
@@ -28,36 +27,37 @@ class CraftAsyncTask extends CraftTask {
     public void run() {
         final Thread thread = Thread.currentThread();
         synchronized(workers) {
-            if (getPeriod() == -2) {
+            if (getPeriod() == CraftTask.CANCEL) {
                 // Never continue running after cancelled.
                 // Checking this with the lock is important!
                 return;
             }
             workers.add(
-                new BukkitWorker() {
-                    public Thread getThread() {
-                        return thread;
-                    }
+                    new BukkitWorker() {
+                        public Thread getThread() {
+                            return thread;
+                        }
 
-                    public int getTaskId() {
-                        return CraftAsyncTask.this.getTaskId();
-                    }
+                        public int getTaskId() {
+                            return CraftAsyncTask.this.getTaskId();
+                        }
 
-                    public Plugin getOwner() {
-                        return CraftAsyncTask.this.getOwner();
-                    }
-                });
+                        public Plugin getOwner() {
+                            return CraftAsyncTask.this.getOwner();
+                        }
+                    });
         }
         Throwable thrown = null;
         try {
             super.run();
         } catch (final Throwable t) {
             thrown = t;
-            throw new UnhandledException(
+            getOwner().getLogger().log(
+                    Level.WARNING,
                     String.format(
-                        "Plugin %s generated an exception while executing task %s",
-                        getOwner().getDescription().getFullName(),
-                        getTaskId()),
+                            "Plugin %s generated an exception while executing task %s",
+                            getOwner().getDescription().getFullName(),
+                            getTaskId()),
                     thrown);
         } finally {
             // Cleanup is important for any async task, otherwise ghost tasks are everywhere
@@ -75,10 +75,10 @@ class CraftAsyncTask extends CraftTask {
                     if (!removed) {
                         throw new IllegalStateException(
                                 String.format(
-                                    "Unable to remove worker %s on task %s for %s",
-                                    thread.getName(),
-                                    getTaskId(),
-                                    getOwner().getDescription().getFullName()),
+                                        "Unable to remove worker %s on task %s for %s",
+                                        thread.getName(),
+                                        getTaskId(),
+                                        getOwner().getDescription().getFullName()),
                                 thrown); // We don't want to lose the original exception, if any
                     }
                 } finally {
@@ -99,11 +99,11 @@ class CraftAsyncTask extends CraftTask {
     boolean cancel0() {
         synchronized (workers) {
             // Synchronizing here prevents race condition for a completing task
-            setPeriod(-2l);
+            setPeriod(CraftTask.CANCEL);
             if (workers.isEmpty()) {
                 runners.remove(getTaskId());
             }
         }
         return true;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index 4b1e3523..6c00576e 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -1,15 +1,18 @@
 package org.bukkit.craftbukkit.scheduler;
 
 import org.bukkit.Bukkit;
-import co.aikar.timings.SpigotTimings; // Spigot
-import co.aikar.timings.Timing; // Spigot
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitTask;
 
 
-public class CraftTask implements BukkitTask, Runnable { // Spigot
+class CraftTask implements BukkitTask, Runnable {
 
     private volatile CraftTask next = null;
+    public static final int ERROR = 0;
+    public static final int NO_REPEATING = -1;
+    public static final int CANCEL = -2;
+    public static final int PROCESS_FOR_FUTURE = -3;
+    public static final int DONE_FOR_FUTURE = -4;
     /**
      * -1 means no repeating <br>
      * -2 means cancel <br>
@@ -20,26 +23,23 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
      */
     private volatile long period;
     private long nextRun;
-    public final Runnable task; //Spigot
-    public Timing timings; // Spigot
+    private final Runnable task;
     private final Plugin plugin;
     private final int id;
 
     CraftTask() {
-        this(null, null, -1, -1);
+        this(null, null, CraftTask.NO_REPEATING, CraftTask.NO_REPEATING);
     }
 
     CraftTask(final Runnable task) {
-        this(null, task, -1, -1);
+        this(null, task, CraftTask.NO_REPEATING, CraftTask.NO_REPEATING);
     }
 
-    // Spigot start
     CraftTask(final Plugin plugin, final Runnable task, final int id, final long period) {
         this.plugin = plugin;
         this.task = task;
         this.id = id;
         this.period = period;
-        timings = task != null ? SpigotTimings.getPluginTaskTimings(this, period) : null; // Spigot
     }
 
     public final int getTaskId() {
@@ -55,9 +55,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
     }
 
     public void run() {
-        if (timings != null && isSync()) timings.startTiming(); // Spigot
         task.run();
-        if (timings != null && isSync()) timings.stopTiming(); // Spigot
     }
 
     long getPeriod() {
@@ -88,6 +86,11 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         return task.getClass();
     }
 
+    @Override
+    public boolean isCancelled() {
+        return (period == CraftTask.CANCEL);
+    }
+
     public void cancel() {
         Bukkit.getScheduler().cancelTask(id);
     }
@@ -98,8 +101,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
      * @return false if it is a craft future task that has already begun execution, true otherwise
      */
     boolean cancel0() {
-        setPeriod(-2l);
+        setPeriod(CraftTask.CANCEL);
         return true;
     }
-
-}
+}
\ No newline at end of file
-- 
2.21.0.windows.1

