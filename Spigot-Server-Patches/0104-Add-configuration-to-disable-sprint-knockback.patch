From 689544f64cef35db562ab3f0159671e2756fa76d Mon Sep 17 00:00:00 2001
From: BuildTools <gilbertodamian14@gmail.com>
Date: Mon, 9 Jul 2018 14:58:34 -0500
Subject: [PATCH] Add configuration to disable sprint knockback


diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 6590fa30..9cf18068 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -976,7 +976,7 @@ public abstract class EntityHuman extends EntityLiving {
 
                 int i = b0 + EnchantmentManager.a((EntityLiving) this);
 
-                if (this.isSprinting()) {
+                if (this.isSprinting() && !org.github.paperspigot.PaperSpigotConfig.disableSprintKnockback) {
                     ++i;
                 }
 
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
index d6d9899e..6e599951 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
@@ -1,16 +1,6 @@
 package org.github.paperspigot;
 
 import com.google.common.base.Throwables;
-import java.io.File;
-import java.io.IOException;
-import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.*;
-import java.util.logging.Level;
-
-import net.minecraft.server.Item;
 import net.minecraft.server.Items;
 import net.minecraft.server.MinecraftServer;
 import org.apache.commons.lang.StringUtils;
@@ -20,8 +10,16 @@ import org.bukkit.command.Command;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 
-public class PaperSpigotConfig
-{
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.*;
+import java.util.logging.Level;
+
+public class PaperSpigotConfig {
 
     private static File CONFIG_FILE;
     private static final String HEADER = "This is the main configuration file for PaperSpigot.\n"
@@ -38,150 +36,133 @@ public class PaperSpigotConfig
     static Map<String, Command> commands;
     /*========================================================================*/
 
-    public static void init(File configFile)
-    {
+    public static void init(File configFile) {
         CONFIG_FILE = configFile;
         config = new YamlConfiguration();
-        try
-        {
-            config.load ( CONFIG_FILE );
-        } catch ( IOException ex )
-        {
-        } catch ( InvalidConfigurationException ex )
-        {
-            Bukkit.getLogger().log( Level.SEVERE, "Could not load paper.yml, please correct your syntax errors", ex );
-            throw Throwables.propagate( ex );
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ex) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load paper.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
         }
-        config.options().header( HEADER );
-        config.options().copyDefaults( true );
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
 
         commands = new HashMap<String, Command>();
 
-        version = getInt( "config-version", 9 );
-        set( "config-version", 9 );
-        readConfig( PaperSpigotConfig.class, null );
+        version = getInt("config-version", 9);
+        set("config-version", 9);
+        readConfig(PaperSpigotConfig.class, null);
     }
 
-    public static void registerCommands()
-    {
-        for ( Map.Entry<String, Command> entry : commands.entrySet() )
-        {
-            MinecraftServer.getServer().server.getCommandMap().register( entry.getKey(), "PaperSpigot", entry.getValue() );
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "PaperSpigot", entry.getValue());
         }
     }
 
-    static void readConfig(Class<?> clazz, Object instance)
-    {
-        for ( Method method : clazz.getDeclaredMethods() )
-        {
-            if ( Modifier.isPrivate( method.getModifiers() ) )
-            {
-                if ( method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE )
-                {
-                    try
-                    {
-                        method.setAccessible( true );
-                        method.invoke( instance );
-                    } catch ( InvocationTargetException ex )
-                    {
-                        throw Throwables.propagate( ex.getCause() );
-                    } catch ( Exception ex )
-                    {
-                        Bukkit.getLogger().log( Level.SEVERE, "Error invoking " + method, ex );
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
                     }
                 }
             }
         }
 
-        try
-        {
-            config.save( CONFIG_FILE );
-        } catch ( IOException ex )
-        {
-            Bukkit.getLogger().log( Level.SEVERE, "Could not save " + CONFIG_FILE, ex );
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
         }
     }
 
-    private static void set(String path, Object val)
-    {
-        config.set( path, val );
+    private static void set(String path, Object val) {
+        config.set(path, val);
     }
 
-    private static boolean getBoolean(String path, boolean def)
-    {
-        config.addDefault( path, def );
-        return config.getBoolean( path, config.getBoolean( path ) );
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
     }
 
-    private static double getDouble(String path, double def)
-    {
-        config.addDefault( path, def );
-        return config.getDouble( path, config.getDouble( path ) );
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
     }
 
-    private static float getFloat(String path, float def)
-    {
+    private static float getFloat(String path, float def) {
         // TODO: Figure out why getFloat() always returns the default value.
-        return (float) getDouble( path, (double) def );
+        return (float) getDouble(path, (double) def);
     }
 
-    private static int getInt(String path, int def)
-    {
-        config.addDefault( path, def );
-        return config.getInt( path, config.getInt( path ) );
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
     }
 
-    private static <T> List getList(String path, T def)
-    {
-        config.addDefault( path, def );
-        return (List<T>) config.getList( path, config.getList( path ) );
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList(path, config.getList(path));
     }
 
-    private static String getString(String path, String def)
-    {
-        config.addDefault( path, def );
-        return config.getString( path, config.getString( path ) );
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
     }
 
     public static double babyZombieMovementSpeed;
-    private static void babyZombieMovementSpeed()
-    {
-        babyZombieMovementSpeed = getDouble( "settings.baby-zombie-movement-speed", 0.5D ); // Player moves at 0.1F, for reference
+
+    private static void babyZombieMovementSpeed() {
+        babyZombieMovementSpeed = getDouble("settings.baby-zombie-movement-speed", 0.5D); // Player moves at 0.1F, for reference
+    }
+
+    public static boolean disableSprintKnockback;
+
+    private static void disableSprintKnockback() {
+        disableSprintKnockback = getBoolean("settings.disable-sprint-knockback", false);
     }
 
     public static boolean interactLimitEnabled;
-    private static void interactLimitEnabled()
-    {
-        interactLimitEnabled = getBoolean( "settings.limit-player-interactions", true );
-        if ( !interactLimitEnabled )
-        {
-            Bukkit.getLogger().log( Level.INFO, "Disabling player interaction limiter, your server may be more vulnerable to malicious users" );
+
+    private static void interactLimitEnabled() {
+        interactLimitEnabled = getBoolean("settings.limit-player-interactions", true);
+        if (!interactLimitEnabled) {
+            Bukkit.getLogger().log(Level.INFO, "Disabling player interaction limiter, your server may be more vulnerable to malicious users");
         }
     }
 
     public static double strengthEffectModifier;
     public static double weaknessEffectModifier;
-    private static void effectModifiers()
-    {
-        strengthEffectModifier = getDouble( "effect-modifiers.strength", 1.3D );
-        weaknessEffectModifier = getDouble( "effect-modifiers.weakness", -0.5D );
+
+    private static void effectModifiers() {
+        strengthEffectModifier = getDouble("effect-modifiers.strength", 1.3D);
+        weaknessEffectModifier = getDouble("effect-modifiers.weakness", -0.5D);
     }
 
     public static Set<Integer> dataValueAllowedItems;
-    private static void dataValueAllowedItems()
-    {
-        dataValueAllowedItems = new HashSet<Integer>( getList( "data-value-allowed-items", Collections.emptyList() ) );
-        Bukkit.getLogger().info( "Data value allowed items: " + StringUtils.join(dataValueAllowedItems, ", ") );
+
+    private static void dataValueAllowedItems() {
+        dataValueAllowedItems = new HashSet<Integer>(getList("data-value-allowed-items", Collections.emptyList()));
+        Bukkit.getLogger().info("Data value allowed items: " + StringUtils.join(dataValueAllowedItems, ", "));
     }
 
     public static boolean stackableLavaBuckets;
     public static boolean stackableWaterBuckets;
     public static boolean stackableMilkBuckets;
-    private static void stackableBuckets()
-    {
-        stackableLavaBuckets = getBoolean( "stackable-buckets.lava", false );
-        stackableWaterBuckets = getBoolean( "stackable-buckets.water", false );
-        stackableMilkBuckets = getBoolean( "stackable-buckets.milk", false );
+
+    private static void stackableBuckets() {
+        stackableLavaBuckets = getBoolean("stackable-buckets.lava", false);
+        stackableWaterBuckets = getBoolean("stackable-buckets.water", false);
+        stackableMilkBuckets = getBoolean("stackable-buckets.milk", false);
 
         Field maxStack;
 
@@ -218,8 +199,8 @@ public class PaperSpigotConfig
     }
 
     public static boolean warnForExcessiveVelocity;
-    private static void excessiveVelocityWarning()
-    {
+
+    private static void excessiveVelocityWarning() {
         warnForExcessiveVelocity = getBoolean("warnWhenSettingExcessiveVelocity", true);
     }
 }
-- 
2.21.0.windows.1

