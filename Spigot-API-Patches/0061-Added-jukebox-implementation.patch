From 360746c4754f0ca6fe8926edbafc524c51fc2711 Mon Sep 17 00:00:00 2001
From: TomateDeveloper <ianfe@martina.com.co>
Date: Wed, 8 Jan 2020 23:02:54 -0500
Subject: [PATCH] Added jukebox implementation


diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 52fb2dbf..1d388f55 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -1219,6 +1219,16 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
 
     void setDatabaseIdentifier(String identifier);
 
+    byte getPlayerVolume();
+
+    void setPlayerVolume(byte volume);
+
+    void stopPlayingSong();
+
+    void playSong(String fileName);
+
+    boolean isReceivingSong();
+
     // Spigot start
     class Spigot extends Entity.Spigot
     {
diff --git a/src/main/java/org/bukkit/event/jukebox/SongDestroyingEvent.java b/src/main/java/org/bukkit/event/jukebox/SongDestroyingEvent.java
new file mode 100644
index 00000000..d8d5634e
--- /dev/null
+++ b/src/main/java/org/bukkit/event/jukebox/SongDestroyingEvent.java
@@ -0,0 +1,39 @@
+package org.bukkit.event.jukebox;
+
+import org.bukkit.craftbukkit.jukebox.player.CraftSongPlayer;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+
+public class SongDestroyingEvent extends Event implements Cancellable {
+
+    private static final HandlerList handlers = new HandlerList();
+    private CraftSongPlayer song;
+    private boolean cancelled = false;
+
+    public SongDestroyingEvent(CraftSongPlayer song) {
+        this.song = song;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    public CraftSongPlayer getSongPlayer() {
+        return song;
+    }
+
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean arg0) {
+        cancelled = arg0;
+    }
+}
diff --git a/src/main/java/org/bukkit/event/jukebox/SongEndEvent.java b/src/main/java/org/bukkit/event/jukebox/SongEndEvent.java
new file mode 100644
index 00000000..2e326b61
--- /dev/null
+++ b/src/main/java/org/bukkit/event/jukebox/SongEndEvent.java
@@ -0,0 +1,27 @@
+package org.bukkit.event.jukebox;
+
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.bukkit.jukebox.player.SongPlayer;
+
+public class SongEndEvent extends Event {
+
+    private static final HandlerList handlers = new HandlerList();
+    private SongPlayer song;
+
+    public SongEndEvent(SongPlayer song) {
+        this.song = song;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    public SongPlayer getSongPlayer() {
+        return song;
+    }
+
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/org/bukkit/event/jukebox/SongStoppedEvent.java b/src/main/java/org/bukkit/event/jukebox/SongStoppedEvent.java
new file mode 100644
index 00000000..d1d46d91
--- /dev/null
+++ b/src/main/java/org/bukkit/event/jukebox/SongStoppedEvent.java
@@ -0,0 +1,27 @@
+package org.bukkit.event.jukebox;
+
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.bukkit.jukebox.player.SongPlayer;
+
+public class SongStoppedEvent extends Event {
+
+    private static final HandlerList handlers = new HandlerList();
+    private SongPlayer song;
+
+    public SongStoppedEvent(SongPlayer song) {
+        this.song = song;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    public SongPlayer getSongPlayer() {
+        return song;
+    }
+
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/org/bukkit/jukebox/instruments/FadeType.java b/src/main/java/org/bukkit/jukebox/instruments/FadeType.java
new file mode 100644
index 00000000..ae17c0a3
--- /dev/null
+++ b/src/main/java/org/bukkit/jukebox/instruments/FadeType.java
@@ -0,0 +1,5 @@
+package org.bukkit.jukebox.instruments;
+
+public enum FadeType {
+    FADE_LINEAR
+}
diff --git a/src/main/java/org/bukkit/jukebox/instruments/Instrument.java b/src/main/java/org/bukkit/jukebox/instruments/Instrument.java
new file mode 100644
index 00000000..7c49128c
--- /dev/null
+++ b/src/main/java/org/bukkit/jukebox/instruments/Instrument.java
@@ -0,0 +1,36 @@
+package org.bukkit.jukebox.instruments;
+
+import org.bukkit.Sound;
+
+public class Instrument {
+
+    public static Sound getInstrument(byte instrument) {
+        switch (instrument) {
+            case 2:
+                return Sound.NOTE_BASS_DRUM;
+            case 3:
+                return Sound.NOTE_SNARE_DRUM;
+            case 4:
+                return Sound.NOTE_STICKS;
+            case 5:
+                return Sound.NOTE_BASS_GUITAR;
+            default:
+                return Sound.NOTE_BASS;
+        }
+    }
+
+    public static org.bukkit.Instrument getBukkitInstrument(byte instrument) {
+        switch (instrument) {
+            case 1:
+                return org.bukkit.Instrument.BASS_GUITAR;
+            case 2:
+                return org.bukkit.Instrument.BASS_DRUM;
+            case 3:
+                return org.bukkit.Instrument.SNARE_DRUM;
+            case 4:
+                return org.bukkit.Instrument.STICKS;
+            default:
+                return org.bukkit.Instrument.PIANO;
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/jukebox/instruments/Interpolator.java b/src/main/java/org/bukkit/jukebox/instruments/Interpolator.java
new file mode 100644
index 00000000..1e0e3143
--- /dev/null
+++ b/src/main/java/org/bukkit/jukebox/instruments/Interpolator.java
@@ -0,0 +1,66 @@
+package org.bukkit.jukebox.instruments;
+
+import java.util.Arrays;
+
+public class Interpolator {
+
+    private static double[] interpLinear(double[] x, double[] y, double[] xi) throws IllegalArgumentException {
+
+        if (x.length != y.length) {
+            throw new IllegalArgumentException("X and Y must be the same length");
+        }
+        if (x.length == 1) {
+            throw new IllegalArgumentException("X must contain more than one value");
+        }
+        double[] dx = new double[x.length - 1];
+        double[] dy = new double[x.length - 1];
+        double[] slope = new double[x.length - 1];
+        double[] intercept = new double[x.length - 1];
+
+        for (int i = 0; i < x.length - 1; i++) {
+            dx[i] = x[i + 1] - x[i];
+            if (dx[i] == 0) {
+                throw new IllegalArgumentException("X must be montotonic. A duplicate " + "x-value was found");
+            }
+            if (dx[i] < 0) {
+                throw new IllegalArgumentException("X must be sorted");
+            }
+            dy[i] = y[i + 1] - y[i];
+            slope[i] = dy[i] / dx[i];
+            intercept[i] = y[i] - x[i] * slope[i];
+        }
+
+        double[] yi = new double[xi.length];
+        for (int i = 0; i < xi.length; i++) {
+            if ((xi[i] > x[x.length - 1]) || (xi[i] < x[0])) {
+                yi[i] = Double.NaN;
+            } else {
+                int loc = Arrays.binarySearch(x, xi[i]);
+                if (loc < -1) {
+                    loc = -loc - 2;
+                    yi[i] = slope[loc] * xi[i] + intercept[loc];
+                } else {
+                    yi[i] = y[loc];
+                }
+            }
+        }
+
+        return yi;
+    }
+
+    public static double interpLinear(double[] xy, double xx) {
+        if (xy.length % 2 != 0) {
+            throw new IllegalArgumentException("XY must be divisible by two.");
+        }
+        double[] x = new double[xy.length / 2];
+        double[] y = new double[x.length];
+        for (int i = 0; i < xy.length; i++) {
+            if (i % 2 == 0) {
+                x[i / 2] = xy[i];
+            } else {
+                y[i / 2] = xy[i];
+            }
+        }
+        return interpLinear(x, y, new double[]{xx})[0];
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/jukebox/instruments/NotePitch.java b/src/main/java/org/bukkit/jukebox/instruments/NotePitch.java
new file mode 100644
index 00000000..e9e3d6ff
--- /dev/null
+++ b/src/main/java/org/bukkit/jukebox/instruments/NotePitch.java
@@ -0,0 +1,48 @@
+package org.bukkit.jukebox.instruments;
+
+public enum NotePitch {
+
+    NOTE_0(0, 0.5F),
+    NOTE_1(1, 0.53F),
+    NOTE_2(2, 0.56F),
+    NOTE_3(3, 0.6F),
+    NOTE_4(4, 0.63F),
+    NOTE_5(5, 0.67F),
+    NOTE_6(6, 0.7F),
+    NOTE_7(7, 0.76F),
+    NOTE_8(8, 0.8F),
+    NOTE_9(9, 0.84F),
+    NOTE_10(10, 0.9F),
+    NOTE_11(11, 0.94F),
+    NOTE_12(12, 1.0F),
+    NOTE_13(13, 1.06F),
+    NOTE_14(14, 1.12F),
+    NOTE_15(15, 1.18F),
+    NOTE_16(16, 1.26F),
+    NOTE_17(17, 1.34F),
+    NOTE_18(18, 1.42F),
+    NOTE_19(19, 1.5F),
+    NOTE_20(20, 1.6F),
+    NOTE_21(21, 1.68F),
+    NOTE_22(22, 1.78F),
+    NOTE_23(23, 1.88F),
+    NOTE_24(24, 2.0F);
+
+    public int note;
+    public float pitch;
+
+    NotePitch(int note, float pitch) {
+        this.note = note;
+        this.pitch = pitch;
+    }
+
+    public static float getPitch(int note) {
+        for (NotePitch notePitch : values()) {
+            if (notePitch.note == note) {
+                return notePitch.pitch;
+            }
+        }
+
+        return 0.0F;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/jukebox/instruments/partial/Layer.java b/src/main/java/org/bukkit/jukebox/instruments/partial/Layer.java
new file mode 100644
index 00000000..a2be448a
--- /dev/null
+++ b/src/main/java/org/bukkit/jukebox/instruments/partial/Layer.java
@@ -0,0 +1,14 @@
+package org.bukkit.jukebox.instruments.partial;
+
+public interface Layer {
+
+    Note getNote(int tick);
+
+    void setNote(int tick, Note note);
+
+    byte getVolume();
+
+    void setVolume(byte volume);
+
+    void setName(String name);
+}
diff --git a/src/main/java/org/bukkit/jukebox/instruments/partial/Note.java b/src/main/java/org/bukkit/jukebox/instruments/partial/Note.java
new file mode 100644
index 00000000..24b71e99
--- /dev/null
+++ b/src/main/java/org/bukkit/jukebox/instruments/partial/Note.java
@@ -0,0 +1,8 @@
+package org.bukkit.jukebox.instruments.partial;
+
+public interface Note {
+
+    byte getInstrument();
+
+    byte getKey();
+}
diff --git a/src/main/java/org/bukkit/jukebox/instruments/partial/Song.java b/src/main/java/org/bukkit/jukebox/instruments/partial/Song.java
new file mode 100644
index 00000000..de90c342
--- /dev/null
+++ b/src/main/java/org/bukkit/jukebox/instruments/partial/Song.java
@@ -0,0 +1,12 @@
+package org.bukkit.jukebox.instruments.partial;
+
+import java.util.HashMap;
+
+public interface Song {
+
+    HashMap<Integer, Layer> getLayerHashMap();
+
+    short getLength();
+
+    float getDelay();
+}
diff --git a/src/main/java/org/bukkit/jukebox/player/SongPlayer.java b/src/main/java/org/bukkit/jukebox/player/SongPlayer.java
new file mode 100644
index 00000000..82e59f8c
--- /dev/null
+++ b/src/main/java/org/bukkit/jukebox/player/SongPlayer.java
@@ -0,0 +1,57 @@
+package org.bukkit.jukebox.player;
+
+import org.bukkit.jukebox.instruments.FadeType;
+import org.bukkit.jukebox.instruments.partial.Song;
+import org.bukkit.entity.Player;
+
+import java.util.List;
+
+public interface SongPlayer {
+
+    FadeType getFadeType();
+
+    void setFadeType(FadeType fadeType);
+
+    byte getFadeTarget();
+
+    void setFadeTarget(byte fadeTarget);
+
+    byte getFadeStart();
+
+    void setFadeStart(byte fadeStart);
+
+    int getFadeDuration();
+
+    void setFadeDuration(int fadeDuration);
+
+    int getFadeDone();
+
+    void setFadeDone(int fadeDone);
+
+    List<String> getPlayerList();
+
+    void addPlayer(Player p);
+
+    boolean isLoop();
+
+    void setLoop(boolean loop);
+
+    boolean getAutoDestroy();
+
+    void setAutoDestroy(boolean value);
+
+    void playTick(Player p, int tick);
+
+    boolean isPlaying();
+
+    void setPlaying(boolean playing);
+
+    short getTick();
+
+    void removePlayer(Player p);
+
+    byte getVolume();
+
+    Song getSong();
+
+}
-- 
2.22.0.windows.1

